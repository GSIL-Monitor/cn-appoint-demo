<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <description>项目的线程池管理</description>

    <!-- 添加默认实现 -->
    <bean id="threadFactory" class="java.util.concurrent.Executors$DefaultThreadFactory"/>

    <bean id="threadPoolTaskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="${threadPool.corePoolSize}"/>
        <property name="maxPoolSize" value="${threadPool.maxPoolSize}"/>
        <property name="queueCapacity" value="${threadPool.queueCapacity}"/>
        <property name="allowCoreThreadTimeOut" value="true"/>
        <property name="keepAliveSeconds" value="${threadPool.keepAliveSeconds}"/>
        <property name="threadFactory" ref="threadFactory"/>
        <property name="rejectedExecutionHandler">
            <!-- AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 -->
            <!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 -->
            <!-- DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
            <!-- DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
            <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy"/>
        </property>
    </bean>

</beans>